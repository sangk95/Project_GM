//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GMInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GMInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GMInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GMInputAction"",
    ""maps"": [
        {
            ""name"": ""PC"",
            ""id"": ""e703ce50-68ba-4e85-ad84-d462afde4e6a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ad4f3159-3d07-4746-80d9-1bd02f6baf7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""7d16650d-7bf3-4fc9-8592-fb5913288a4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""405c8907-c36a-42bf-ae9e-f9eb6060d1a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""56fad8d0-2f0c-44e4-b685-2cb993e9655b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1a8dbf59-6030-4c19-8932-70f90bc7a5e3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""61036b92-565b-4bbd-8a4d-19ced9a32e3d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""39859089-191c-4cd7-932b-c3e9a36ddbbc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""76ee9b81-e7b4-402d-a57e-5abb9aa704e5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ce7055c3-0089-48d7-88b7-a645c0b52f5a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""10937235-d9f7-464a-952a-12a968371669"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""NormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ea70a69-e933-4b99-9544-21257179c572"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GreenMoon"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bef23978-79d5-4b9e-9def-9c0eca3a09e8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GreenMoon"",
            ""bindingGroup"": ""GreenMoon"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_Move = m_PC.FindAction("Move", throwIfNotFound: true);
        m_PC_Dash = m_PC.FindAction("Dash", throwIfNotFound: true);
        m_PC_NormalAttack = m_PC.FindAction("NormalAttack", throwIfNotFound: true);
        m_PC_MousePosition = m_PC.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC
    private readonly InputActionMap m_PC;
    private IPCActions m_PCActionsCallbackInterface;
    private readonly InputAction m_PC_Move;
    private readonly InputAction m_PC_Dash;
    private readonly InputAction m_PC_NormalAttack;
    private readonly InputAction m_PC_MousePosition;
    public struct PCActions
    {
        private @GMInputAction m_Wrapper;
        public PCActions(@GMInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PC_Move;
        public InputAction @Dash => m_Wrapper.m_PC_Dash;
        public InputAction @NormalAttack => m_Wrapper.m_PC_NormalAttack;
        public InputAction @MousePosition => m_Wrapper.m_PC_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void SetCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PCActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnMove;
                @Dash.started -= m_Wrapper.m_PCActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnDash;
                @NormalAttack.started -= m_Wrapper.m_PCActionsCallbackInterface.OnNormalAttack;
                @NormalAttack.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnNormalAttack;
                @NormalAttack.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnNormalAttack;
                @MousePosition.started -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_PCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @NormalAttack.started += instance.OnNormalAttack;
                @NormalAttack.performed += instance.OnNormalAttack;
                @NormalAttack.canceled += instance.OnNormalAttack;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public PCActions @PC => new PCActions(this);
    private int m_GreenMoonSchemeIndex = -1;
    public InputControlScheme GreenMoonScheme
    {
        get
        {
            if (m_GreenMoonSchemeIndex == -1) m_GreenMoonSchemeIndex = asset.FindControlSchemeIndex("GreenMoon");
            return asset.controlSchemes[m_GreenMoonSchemeIndex];
        }
    }
    public interface IPCActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnNormalAttack(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
